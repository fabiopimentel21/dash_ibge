import streamlit as st
import pandas as pd
import plotly.express as px
import os

st.set_page_config(layout="wide")
st.title("Dashboard Interativo - IBGE")

# Texto explicativo sobre o painel
st.markdown("""
Este painel interativo foi desenvolvido para proporcionar uma visualiza√ß√£o clara, din√¢mica e georreferenciada dos dados demogr√°ficos e socioecon√¥micos da cidade de **Bel√©m (PA)**. As informa√ß√µes apresentadas foram extra√≠das da base oficial do **IBGE (Instituto Brasileiro de Geografia e Estat√≠stica)**, garantindo alta confiabilidade, abrang√™ncia e precis√£o estat√≠stica.

---

### Objetivo

O principal objetivo deste dashboard √© auxiliar empresas, institui√ß√µes p√∫blicas, ONGs e pesquisadores na **compreens√£o do perfil populacional e econ√¥mico por bairro**, permitindo decis√µes mais estrat√©gicas, personalizadas e baseadas em dados.

---

### O que voc√™ pode analisar neste painel?

- **Distribui√ß√£o por G√™nero e Faixa Et√°ria:** Dados detalhados sobre o n√∫mero de moradores por sexo e idade, fundamentais para estrat√©gias de marketing segmentado, lan√ßamento de produtos, pol√≠ticas p√∫blicas ou planejamento urbano.
- **Renda M√©dia e Distribui√ß√£o Social:** Visualiza√ß√£o da renda m√©dia mensal e outros indicadores relacionados ao poder de compra, auxiliando na defini√ß√£o de pre√ßos, expans√£o de servi√ßos ou identifica√ß√£o de regi√µes economicamente vulner√°veis.
- **Tipologia dos Domic√≠lios:** Classifica√ß√£o dos tipos de moradias (casas, apartamentos, vilas, corti√ßos), √∫til para mapear demandas por reformas, constru√ß√£o civil ou servi√ßos residenciais.

---

### Aplica√ß√µes Pr√°ticas

- **Empresas:** An√°lise de mercado por bairro para expans√£o de unidades, defini√ß√£o de pre√ßos e campanhas direcionadas.
- **√ìrg√£os P√∫blicos:** Planejamento de pol√≠ticas p√∫blicas, a√ß√µes sociais e aloca√ß√£o de recursos com base em dados reais.
- **Pesquisadores e ONGs:** Estudo de desigualdade social, urbanismo, sa√∫de p√∫blica e inclus√£o digital.
- **Cidad√£os:** Entendimento do seu pr√≥prio bairro em compara√ß√£o com outros da cidade.

---

Este painel √© um exemplo de como dados p√∫blicos podem ser transformados em conhecimento valioso quando combinados com boas ferramentas de an√°lise e visualiza√ß√£o.
""")

# Carregando a base
try:
    df = pd.read_csv(r'C:\Users\devma\Desktop\DEMANDAS\IBGE\dash_ibge\dados_atualizados\df_editados\base_completa_final.csv')
    st.success("Base de dados carregada com sucesso!")
except FileNotFoundError:
    st.error("Arquivo 'base_completa_final.csv' n√£o encontrado. Certifique-se de que o arquivo est√° no caminho correto.")
    st.stop()

# -------------------------------
# VIS√ÉO GERAL DA CIDADE
# -------------------------------
st.subheader("üìä Vis√£o Geral da Cidade de Bel√©m")

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Popula√ß√£o Total", f"{df['Quantidade de moradores'].sum():,.0f}")
with col2:
    st.metric("Total Masculino", f"{df['Sexo masculino'].sum():,.0f}")
with col3:
    st.metric("Total Feminino", f"{df['Sexo feminino'].sum():,.0f}")
with col4:
    renda_media_geral = df["Valor do rendimento nominal m√©dio mensal das pessoas respons√°veis com rendimentos por domic√≠lios particulares permanentes ocupados"].mean()
    st.metric("Renda M√©dia Mensal", f"R$ {renda_media_geral:,.2f}")

st.markdown("---")

# Popula√ß√£o por Bairro
pop_bairro = df.groupby("NM_BAIRRO")["Quantidade de moradores"].sum().reset_index()
fig_pop_bairro = px.bar(pop_bairro, x="NM_BAIRRO", y="Quantidade de moradores",
                        title="Popula√ß√£o Total por Bairro",
                        labels={"Quantidade de moradores": "Popula√ß√£o", "NM_BAIRRO": "Bairro"})
st.plotly_chart(fig_pop_bairro, use_container_width=True)

# Distribui√ß√£o por Sexo
dados_sexo_total = pd.DataFrame({
    "Sexo": ["Masculino", "Feminino"],
    "Popula√ß√£o": [df["Sexo masculino"].sum(), df["Sexo feminino"].sum()]
})
fig_sexo_total = px.bar(dados_sexo_total, x="Sexo", y="Popula√ß√£o",
                        title="Distribui√ß√£o Total por Sexo",
                        color="Sexo",
                        labels={"Popula√ß√£o": "N√∫mero de Moradores"})
st.plotly_chart(fig_sexo_total, use_container_width=True)

# Popula√ß√£o por Faixa Et√°ria
colunas_masculino_total = [col for col in df.columns if 'Sexo masculino' in col and 'anos' in col]
dados_faixa_total = pd.DataFrame({
    'Faixa Et√°ria': [c.replace('Sexo masculino, ', '') for c in colunas_masculino_total],
    'Masculino': [df[c].sum() for c in colunas_masculino_total],
    'Feminino': [df[c.replace('Sexo masculino', 'Sexo feminino')].sum() for c in colunas_masculino_total]
})
fig_faixa_total = px.bar(dados_faixa_total, x='Faixa Et√°ria', y=['Masculino', 'Feminino'],
                         title="Distribui√ß√£o por Faixa Et√°ria - Total da Cidade",
                         barmode='group',
                         labels={'value': 'N√∫mero de Moradores', 'variable': 'Sexo'})
st.plotly_chart(fig_faixa_total, use_container_width=True)

# Dispers√£o Popula√ß√£o vs Renda M√©dia
df_disp = df.groupby("NM_BAIRRO").agg({
    "Quantidade de moradores": "sum",
    "Valor do rendimento nominal m√©dio mensal das pessoas respons√°veis com rendimentos por domic√≠lios particulares permanentes ocupados": "mean"
}).reset_index()

fig_disp = px.scatter(df_disp,
                      x="Quantidade de moradores",
                      y="Valor do rendimento nominal m√©dio mensal das pessoas respons√°veis com rendimentos por domic√≠lios particulares permanentes ocupados",
                      text="NM_BAIRRO",
                      title="Correla√ß√£o entre Popula√ß√£o e Renda M√©dia por Bairro",
                      labels={"Quantidade de moradores": "Popula√ß√£o Total",
                              "Valor do rendimento nominal m√©dio mensal das pessoas respons√°veis com rendimentos por domic√≠lios particulares permanentes ocupados": "Renda M√©dia (R$)"},
                      size="Quantidade de moradores")
st.plotly_chart(fig_disp, use_container_width=True)

st.markdown("---")

# -------------------------------
# Filtros no Sidebar
# -------------------------------
st.sidebar.header("Filtros de Bairros")
bairros_unicos = sorted(df["NM_BAIRRO"].unique())
bairros_selecionados = st.sidebar.multiselect("Selecione um ou mais bairros para an√°lise:", bairros_unicos)

# -------------------------------
# An√°lise por bairro separadamente
# -------------------------------
st.subheader("An√°lise Detalhada por Bairro")

if not bairros_selecionados:
    st.info("Por favor, selecione um ou mais bairros no painel lateral para iniciar a an√°lise detalhada.")
else:
    for bairro in bairros_selecionados:
        df_bairro = df[df["NM_BAIRRO"] == bairro].copy()
        
        with st.expander(f"An√°lise do Bairro: {bairro}", expanded=True):
            st.markdown("---")

            # Indicadores de Popula√ß√£o
            st.subheader("Indicadores de Popula√ß√£o")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Popula√ß√£o Total", f'{df_bairro["Quantidade de moradores"].iloc[0]:,.0f}')
            with col2:
                st.metric("Moradores do Sexo Masculino", f'{df_bairro["Sexo masculino"].iloc[0]:,.0f}')
            with col3:
                st.metric("Moradores do Sexo Feminino", f'{df_bairro["Sexo feminino"].iloc[0]:,.0f}')
                
            st.markdown("---")

            # M√©tricas de Renda e Domic√≠lios
            st.subheader("M√©tricas de Renda e Domic√≠lios")
            col_renda_1, col_renda_2, col_renda_3, col_renda_4 = st.columns(4)

            try:
                valor_pessoas_responsaveis = df_bairro["Pessoas respons√°veis em domic√≠lios particulares permanentes ocupados"].iloc[0]
                with col_renda_1:
                    st.metric("Pessoas Respons√°veis", f'{valor_pessoas_responsaveis:,.0f}')
            except KeyError:
                with col_renda_1:
                    st.warning("Coluna n√£o encontrada: Pessoas respons√°veis...")

            try:
                valor_moradores_por_domicilio = df_bairro["Moradores em domic√≠lios particulares permanentes ocupados"].iloc[0]
                with col_renda_2:
                    st.metric("Moradores por Domic√≠lio", f'{valor_moradores_por_domicilio:,.0f}')
            except KeyError:
                with col_renda_2:
                    st.warning("Coluna n√£o encontrada: Moradores em domic√≠lios...")

            try:
                valor_renda_media = df_bairro["Valor do rendimento nominal m√©dio mensal das pessoas respons√°veis com rendimentos por domic√≠lios particulares permanentes ocupados"].iloc[0]
                with col_renda_3:
                    st.metric("Renda M√©dia Mensal", f'R$ {valor_renda_media:,.2f}')
            except KeyError:
                with col_renda_3:
                    st.warning("Coluna n√£o encontrada: Valor do rendimento...")

            st.markdown("---")
            
            # Gr√°fico de Popula√ß√£o por Sexo
            st.subheader("Distribui√ß√£o da Popula√ß√£o por Sexo")
            dados_sexo = pd.DataFrame({
                'Sexo': ['Masculino', 'Feminino'],
                'Popula√ß√£o': [df_bairro["Sexo masculino"].iloc[0], df_bairro["Sexo feminino"].iloc[0]]
            })
            fig_sexo = px.bar(dados_sexo, x='Sexo', y='Popula√ß√£o',
                              title=f"Popula√ß√£o do Bairro {bairro} por Sexo",
                              color='Sexo',
                              labels={'Popula√ß√£o': 'N√∫mero de Moradores', 'Sexo': 'Sexo'})
            st.plotly_chart(fig_sexo, use_container_width=True)
            
            st.markdown("---")
            
            # Gr√°fico de Popula√ß√£o por Faixa Et√°ria e Sexo
            st.subheader("Distribui√ß√£o da Popula√ß√£o por Faixa Et√°ria e Sexo")
            colunas_masculino = [col for col in df_bairro.columns if 'Sexo masculino' in col and 'anos' in col]
            
            dados_faixa_etaria = pd.DataFrame({
                'Faixa Et√°ria': [c.replace('Sexo masculino, ', '') for c in colunas_masculino],
                'Masculino': [df_bairro[c].iloc[0] for c in colunas_masculino],
                'Feminino': [df_bairro[c.replace('Sexo masculino', 'Sexo feminino')].iloc[0] for c in colunas_masculino]
            })

            fig_faixa_etaria = px.bar(dados_faixa_etaria, x='Faixa Et√°ria', y=['Masculino', 'Feminino'],
                                      title=f"Popula√ß√£o do Bairro {bairro} por Faixa Et√°ria",
                                      barmode='group',
                                      labels={'value': 'N√∫mero de Moradores', 'variable': 'Sexo'})
            st.plotly_chart(fig_faixa_etaria, use_container_width=True)
            
            st.markdown("---")
            
            # Gr√°fico de Domic√≠lios
            st.subheader("Distribui√ß√£o de Domic√≠lios Particulares Ocupados")
            try:
                colunas_domicilios_particulares = {
                    'Casa': 'Domic√≠lios Particulares Permanentes Ocupados, Tipo de esp√©cie √© casa',
                    'Casa de vila ou condom√≠nio': 'Domic√≠lios Particulares Permanentes Ocupados, Tipo de esp√©cie √© casa de vila ou em condom√≠nio',
                    'Apartamento': 'Domic√≠lios Particulares Permanentes Ocupados, Tipo de esp√©cie √© apartamento',
                    'Casa de c√¥modos ou corti√ßo': 'Domic√≠lios Particulares Permanentes Ocupados, Tipo de esp√©cie √© habita√ß√£o em casa de c√¥modos ou corti√ßo'
                }

                dados_domicilios_particulares = pd.DataFrame({
                    'Tipo de Domic√≠lio': list(colunas_domicilios_particulares.keys()),
                    'Quantidade': [df_bairro[col].iloc[0] for col in colunas_domicilios_particulares.values()]
                })

                fig_dom_particulares = px.pie(dados_domicilios_particulares, values='Quantidade', names='Tipo de Domic√≠lio',
                                              title=f"Distribui√ß√£o de Domic√≠lios Particulares em {bairro}")
                st.plotly_chart(fig_dom_particulares, use_container_width=True)
            except KeyError as e:
                st.warning(f"Erro ao gerar o gr√°fico de domic√≠lios. A coluna {e} n√£o foi encontrada. Verifique o nome das colunas na sua base de dados.")

# -------------------------------
# Visualiza√ß√£o da base completa
# -------------------------------
st.subheader("Visualiza√ß√£o da Base de Dados Completa")
st.dataframe(df)
